<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>前端 on 一条鱼尾的博客</title>
        <link>https://example.com/categories/%E5%89%8D%E7%AB%AF/</link>
        <description>Recent content in 前端 on 一条鱼尾的博客</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Thu, 16 Jul 2020 10:42:38 +0800</lastBuildDate><atom:link href="https://example.com/categories/%E5%89%8D%E7%AB%AF/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>快速搞定javascript前端面试学习笔记</title>
        <link>https://example.com/p/%E5%BF%AB%E9%80%9F%E6%90%9E%E5%AE%9Ajavascript%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
        <pubDate>Thu, 16 Jul 2020 10:42:38 +0800</pubDate>
        
        <guid>https://example.com/p/%E5%BF%AB%E9%80%9F%E6%90%9E%E5%AE%9Ajavascript%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
        <description>&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;来源： 慕课网-快速搞定前端初级javascript面试题
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h1 id=&#34;快速搞定前端初级javascript面试题&#34;&gt;快速搞定前端初级javascript面试题&lt;/h1&gt;
&lt;h2 id=&#34;一简介&#34;&gt;一、简介&lt;/h2&gt;
&lt;h3 id=&#34;如何搞定所有面试题&#34;&gt;如何搞定所有面试题&lt;/h3&gt;
&lt;h3 id=&#34;前端知识体系&#34;&gt;前端知识体系&lt;/h3&gt;
&lt;h4 id=&#34;什么是知识体系&#34;&gt;什么是知识体系&lt;/h4&gt;
&lt;h5 id=&#34;高效学习三部曲&#34;&gt;高效学习三部曲：&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;找准知识体系&lt;/li&gt;
&lt;li&gt;刻意练习&lt;/li&gt;
&lt;li&gt;及时反馈&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;知识体系结构化知识范围&#34;&gt;知识体系：结构化知识范围&lt;/h5&gt;
&lt;h5 id=&#34;涵盖所有知识点&#34;&gt;涵盖所有知识点：&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;结构化&lt;/li&gt;
&lt;li&gt;有组织&lt;/li&gt;
&lt;li&gt;易扩展&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;从哪方面梳理&#34;&gt;从哪方面梳理&lt;/h4&gt;
&lt;h5 id=&#34;w3c标准&#34;&gt;W3C标准&lt;/h5&gt;
&lt;h5 id=&#34;ecma-262-标准&#34;&gt;ECMA 262 标准&lt;/h5&gt;
&lt;h5 id=&#34;开发环境&#34;&gt;开发环境&lt;/h5&gt;
&lt;h5 id=&#34;运行环境&#34;&gt;运行环境&lt;/h5&gt;
&lt;h4 id=&#34;知识体系目录&#34;&gt;知识体系目录&lt;/h4&gt;
&lt;h2 id=&#34;二变量类型和计算&#34;&gt;二、变量类型和计算&lt;/h2&gt;
&lt;h3 id=&#34;变量类型和计算&#34;&gt;变量类型和计算&lt;/h3&gt;
&lt;h4 id=&#34;题目&#34;&gt;题目&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;typeOf能判断哪些类型&lt;/li&gt;
&lt;li&gt;何时使用 === 何时使用 ==&lt;/li&gt;
&lt;li&gt;值类型和引用类型的区别&lt;/li&gt;
&lt;li&gt;手写深拷贝&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;知识点&#34;&gt;知识点&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;变量类型
&lt;ul&gt;
&lt;li&gt;值类型 vs 引用类型&lt;/li&gt;
&lt;li&gt;typeOf运算符&lt;/li&gt;
&lt;li&gt;深拷贝&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;变量计算&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;解答&#34;&gt;解答&lt;/h4&gt;
&lt;h3 id=&#34;typeof-和深拷贝&#34;&gt;typeof 和深拷贝&lt;/h3&gt;
&lt;h4 id=&#34;typeof运算符&#34;&gt;typeOf运算符&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;识别所有值类型
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;let a; typeOf a // &amp;#39;undefined&amp;#39;
const str = &amp;#39;abc&amp;#39; typeOf str // &amp;#39;string&amp;#39;
const n = 100 typeOf n // &amp;#39;number&amp;#39;
const b = true typeOf b // &amp;#39;boolean&amp;#39;
const s = Symbol(&amp;#39;s&amp;#39;) typeOf s // &amp;#39;symbol&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;识别函数
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;typeOf console.log // &amp;#39;function&amp;#39;
typeOf function () {} // &amp;#39;function&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;判断是否是引用类型（不可再细分）
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;typeOf null &amp;#39;Object&amp;#39;
typeOf [&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;] &amp;#39;Object&amp;#39;
typeOf {x: 100} &amp;#39;Object&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;深拷贝&#34;&gt;深拷贝&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;/**
 * 深拷贝
 * @param {Object} obj 要拷贝的对象
 */
function deepClone(obj = {}) {
    // 非复杂对象类型直接返回
    if(typeof obj !== &amp;#39;object&amp;#39; || obj == null) {
        return obj
    }
    // 初始化返回结果
    let result
    if(obj instanceof Array) {
        result = []
    } else {
        result = {}
    }

    for(let key in obj) {
        if(obj.hasOwnProperty(key)) {
            // 保证key不是原型的属性
            result[key] = deepClone(obj[key])
        }
    }

    // 返回结果
    return result
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;变量计算&#34;&gt;变量计算&lt;/h3&gt;
&lt;h4 id=&#34;类型转换&#34;&gt;类型转换&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;字符串拼接
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;const a = 100 + 10 // 110
const a = 100 + &amp;#39;10&amp;#39; // &amp;#39;10010&amp;#39;
const a = true + &amp;#39;10&amp;#39; // &amp;#39;true10&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;==&lt;/code&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;100 == &amp;#39;100&amp;#39; // true
0 == &amp;#39;&amp;#39; // true
0 == false // true
false == &amp;#39;&amp;#39; // true
null == undefined // true
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;code&gt;==&lt;/code&gt;的隐式转化比较复杂，目前实际应用意义较小，没必要深究
建议除了 &lt;code&gt;==&lt;/code&gt; null 之外，其他一律使用 &lt;code&gt;===&lt;/code&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;const obj = {x: 100}
if (obj.a == null) {}
// 相当于
// if(obj.a === undefined || obj.a === null) {}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;if语句和逻辑运算
&lt;ul&gt;
&lt;li&gt;truly 变量： &lt;code&gt;!!a === true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;falsely 变量 &lt;code&gt;!!a === false&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;!!0 === false
!!NaN === false
!!&amp;#39;&amp;#39; === false
!!null === false
!!undefined === false
!!false === false
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;逻辑判断
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;console.log(10 &amp;amp;&amp;amp; 0) // 0
console.log(&amp;#39;&amp;#39; || &amp;#39;abc&amp;#39;) // &amp;#39;abc&amp;#39;
console.log(!window.a) // true
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;三原型和原型链&#34;&gt;三、原型和原型链&lt;/h2&gt;
&lt;h3 id=&#34;class&#34;&gt;class&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;  // 类
  class Student {
      constructor(name, number) {
          this.name = name
          this.number = number
      }
      sayHi() {
          console.log(`姓名：${this.name},学号：${this.number}`)
      }
  }

  // 通过new来生成对象/实例
  const xialuo = new Student(&amp;#39;夏洛&amp;#39;, 100)
  console.log(xialuo.name)
  console.log(xialuo.number)
  console.log(xialuo.sayHi())

  const madongmei = new Student(&amp;#39;马冬梅&amp;#39;, 101)
  console.log(madongmei.name)
  console.log(madongmei.number)
  console.log(madongmei.sayHi())
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;继承&#34;&gt;继承&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;  // 父类
  class Person {
    constructor(name) {
      this.name = name
    }
    eat() {
      console.log(`${this.name} eat something`)
    }
  }

  // 子类
  class Student extends Person {
    constructor(name, number) {
      super(name)
      this.number = number
    }
    sayHi() {
      console.log(`姓名：${this.name},学号：${this.number}`)
    }
  }
  // 另一个子类
  class Teacher extends Person {
    constructor(name, major) {
      super(name)
      this.major = major
    }
    teach() {
      console.log(`${this.name}教授：${this.major}`)
    }
  }

  const xialuo = new Student(&amp;#39;夏洛&amp;#39;, 100)
  console.log(xialuo.name)
  console.log(xialuo.number)
  xialuo.sayHi()
  xialuo.eat()

  const wanglaoshi = new Teacher(&amp;#39;王老师&amp;#39;, &amp;#39;数学&amp;#39;)
  console.log(wanglaoshi.name)
  console.log(wanglaoshi.major)
  wanglaoshi.teach()
  wanglaoshi.eat()
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;类型判断---instanceof&#34;&gt;类型判断 - instanceOf&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;xialuo intanceOf Student // true
xialuo intanceOf Person // true
xialuo intanceOf Object // true

[] instanceOf Array // true
[] instanceOf Object // true

{} instanceOf Object // true
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;原型&#34;&gt;原型&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;// class实际上是函数，可见是语法糖
typeOf Person // &amp;#39;function&amp;#39;
typeOf Student // &amp;#39;function&amp;#39;

// 隐式原型和显示原型
console.log(xialuo.__proto__)
console.log(Student.prototype)
console.log(xialuo.__proto__ === Student.prototype) // true
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;http://yanxuan.nosdn.127.net/63de8aa846192792f6e9aec2202e30a5.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;原型.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;原型关系&#34;&gt;原型关系&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;每个&lt;code&gt;class&lt;/code&gt;都有显式原型&lt;/li&gt;
&lt;li&gt;每个实例都有隐式原型 &lt;code&gt;__proto__&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;实例的&lt;code&gt;__proto__&lt;/code&gt;指向对应&lt;code&gt;class&lt;/code&gt;的&lt;code&gt;prototype&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;基于原型的执行规则&#34;&gt;基于原型的执行规则&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;获取属性&lt;code&gt;xialuo.name&lt;/code&gt; 或执行方法&lt;code&gt;xialuo.sayHi()&lt;/code&gt;时&lt;/li&gt;
&lt;li&gt;现在自身属性或方法寻找&lt;/li&gt;
&lt;li&gt;如果找不到则自动去&lt;code&gt;__proto__&lt;/code&gt;寻找&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;原型链&#34;&gt;原型链&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;console.log(Student.prototype.__proto__)
console.log(Person.prototype)
console.log(Student.prototype.__proto__ === Person.prototype) // true
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;http://yanxuan.nosdn.127.net/bfe43487fbcbc810032d14c685150b18.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;原型链.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;题目解答&#34;&gt;题目解答&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;如何准确判断一个变量是不是数组？
&lt;code&gt;a instanceOf Array&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;手写一个简易的jQuery, 考虑插件和扩展机智&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;三作用域和闭包&#34;&gt;三、作用域和闭包&lt;/h2&gt;
&lt;h3 id=&#34;题目-1&#34;&gt;题目&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;this的不同应用场景，如何取值？&lt;/li&gt;
&lt;li&gt;手写bind函数
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;// 手写bind

// 使用bind
function fn1(a, b, c) {
    console.log(&amp;#39;this&amp;#39;, this)
    console.log(a, b, c)
    return &amp;#39;this is this&amp;#39;
}

// const fn2 = fn1.bind({x: 100}, 1, 2, 3)
// fn2()

Function.prototype.bind1 = function () {
    const args = Array.from(arguments)
    const t = args.shift()
    const self = this
    return function () {
        self.apply(t, args)
    }
}
const fn2 = fn1.bind1({x: 100}, 1, 2, 3)
fn2()
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;实际开发中闭包的应用场景，举例说明
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;  // 闭包实现缓存
function createCache() {
    const data = {}
    return {
        get: function (key) {
            return data[key]
        },
        set: function(key, val) {
            data[key] = val
        }
    }
}
const c = createCache()
c.set(&amp;#39;name&amp;#39;, 100)
console.log(c.get(&amp;#39;name&amp;#39;))
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;创建10个&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;标签，点击时弹出对应的序号
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;let a, i
for(i=0; i&amp;lt;10 ;i++) {
  document.createElement(&amp;#39;a&amp;#39;)
  a.innerHTML = i + &amp;#39;&amp;lt;br&amp;gt;&amp;#39;
  a.addEventListener(&amp;#39;click&amp;#39;, function(e) {
    e.preventDefault()
    alert(i)
  })
  document.body.appendChild(a)
}
// 每次点击都会弹出10

// 下面这个才是正确的写法
// let会生成块级作用域
let a
 for(let i=0; i&amp;lt;10 ;i++) {
  a = document.createElement(&amp;#39;a&amp;#39;)
  a.innerHTML = i + &amp;#39;&amp;lt;br&amp;gt;&amp;#39;
  a.addEventListener(&amp;#39;click&amp;#39;, function(e) {
    e.preventDefault()
    alert(i)
  })
  document.body.appendChild(a)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;知识点-1&#34;&gt;知识点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;作用域和自由变量&lt;/li&gt;
&lt;li&gt;闭包
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;// 闭包

// 函数作为返回值
// function create() {
//     let a = 100
//     return function () {
//         console.log(a)
//     }
// }
// let fn = create()
// let a = 200
// fn() // 100

// 函数作为参数
function print(fn) {
  let a = 200
  fn()
}
let a = 100
function fn() {
  console.log(a)
}
print(fn)

// 闭包：自由变量的查找，是函数定义的地方，向上级作用域查找，而不是执行的地方
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;this
&lt;ul&gt;
&lt;li&gt;在class方法中调用&lt;/li&gt;
&lt;li&gt;箭头函数&lt;/li&gt;
&lt;li&gt;谁调用，this指向谁&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;function fn1() {
  console.log(this)
}
fn1() // window
fn1.call({x: 100}) // {x: 100}
const fn2 = fn1.bind({x: 200})
fn2() // {x: 200}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;const zhangsan = {
  name: &amp;#39;张三&amp;#39;,
  sayHi () {
    // this即当前对象
    console.log(this)
  },
  wait () {
    setTimeout(function () {
      // this === window
      console.log(this)
    })
  }
}

// 箭头函数不改变this指向
const zhangsan = {
  name: &amp;#39;张三&amp;#39;,
  sayHi () {
    // this即当前对象
    console.log(this)
  },
  wait () {
    setTimeout(() =&amp;gt; {
      // this即当前对象
      console.log(this)
    })
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在类中使用&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;class Person {
  constructor(name) {
    this.name = name
    this.age = age
  }
  sayHi() {
    console.log(this)
  }
}
const zhangsan = new Person()
zhangsan.sayHi() //zhangsan对象
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;五异步和单线程&#34;&gt;五、异步和单线程&lt;/h2&gt;
&lt;h3 id=&#34;同步和异步的区别&#34;&gt;同步和异步的区别&lt;/h3&gt;
&lt;h4 id=&#34;单线程和异步&#34;&gt;单线程和异步&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;JS&lt;/strong&gt;只是单线程语言，只能同时做一件事&lt;/li&gt;
&lt;li&gt;浏览器和&lt;strong&gt;nodejs&lt;/strong&gt;已支持JS启动进程，如&lt;code&gt;Web Worker&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JS&lt;/strong&gt;和&lt;strong&gt;DOM&lt;/strong&gt;渲染共用同一个线程，因为JS可修改DOM结构&lt;/li&gt;
&lt;li&gt;遇到等待（网络请求，定时任务）不能卡住&lt;/li&gt;
&lt;li&gt;需要异步&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;应用场景&#34;&gt;应用场景&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;网络请求&lt;/li&gt;
&lt;li&gt;定时任务&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;promise&#34;&gt;promise&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;function getData(url) {
  return new Promise((resolve, reject) =&amp;gt; {
    $.ajax({
      url,
      success(data) {
        resolve(data)
      },
      error(err) {
        reject(err)
      }
    })
  })
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;问题解答和总结&#34;&gt;问题解答和总结&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;同步和异步的区别是什么
&lt;ul&gt;
&lt;li&gt;基于JS是单线程语言&lt;/li&gt;
&lt;li&gt;异步不会阻塞代码执行&lt;/li&gt;
&lt;li&gt;同步会阻塞代码执行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;手写用&lt;code&gt;promise&lt;/code&gt;加载一张图片
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;const url = &amp;#34;http://yanxuan.nosdn.127.net/63de8aa846192792f6e9aec2202e30a5.png&amp;#34;
function loadImg(src) {
    return new Promise((resolve, reject) =&amp;gt; {
        const img = document.createElement(&amp;#39;img&amp;#39;)
        img.onload = () =&amp;gt; {
            resolve(img)
        }
        img.onerror = () =&amp;gt; {
            reject(new Error(&amp;#39;图片加载失败&amp;#39;))
        }
        img.src = src
    })
}
loadImg(url).then(img =&amp;gt; {
    console.log(&amp;#39;图片加载成功&amp;#39;, img)
}).catch(err  =&amp;gt; {
    console.log(`失败原因: ${err}`)
})
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;前端使用异步的场景有哪些&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;六从js基础知识到js-web-api&#34;&gt;六、从JS基础知识到JS Web API&lt;/h2&gt;
&lt;h4 id=&#34;dom节点的property&#34;&gt;DOM节点的property&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;const pList = document.querySelectorAll(&amp;#39;p&amp;#39;)
p1 = pList[0]
p1.style.width = &amp;#39;100px&amp;#39;
console.log(p1.style.width)
p1.className = &amp;#39;red&amp;#39;
console.log(p1.className)
console.log(p1.nodeName)
console.log(p1.nodeType)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;dom节点的attribute&#34;&gt;DOM节点的attribute&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;p1.setAttribute(&amp;#39;data-name&amp;#39;, &amp;#39;tangyuan&amp;#39;)
console.log(p1.getAttribute(&amp;#39;data-name&amp;#39;)) // tangyuan
p1.setAttribute(&amp;#39;style&amp;#39;, &amp;#39;font-size: 50px&amp;#39;)
console.log(p1.style.fontSize) // 50px
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;dom结构操作&#34;&gt;DOM结构操作&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;新建节点
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;const p1 = document.createElement(&amp;#39;p&amp;#39;)
p1.innerHTML = &amp;#39;this is p1&amp;#39;
div1.appendChild(p1)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;移动节点
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;const p2 = document.getElementById(&amp;#39;p2&amp;#39;)
div2.appendChild(p2)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;strong&gt;添加已存在的节点会进行移动&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;获取父元素
&lt;code&gt;child.parentNode&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;获取子元素
&lt;code&gt;parent.childNodes&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;删除节点
&lt;code&gt;removeChild&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dom性能&#34;&gt;DOM性能&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;DOM操作非常‘昂贵’,避免频繁的DOM操作&lt;/li&gt;
&lt;li&gt;对DOM查询做缓存
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;// 不缓存 DOM 查询结果
for(let i =0 ;i&amp;lt;document.getElementsByTagName(&amp;#39;p&amp;#39;).length; i++) {
  // 每次循环，都会计算length, 频繁进行DOM查询
}

// 缓存 DOM 查询结果
const pList = document.getElementsByTagName(&amp;#39;p&amp;#39;)
const length = pList.length
for(let i=0; i&amp;lt;length; i++) {
  // 缓存DOM， 只进行一次DOM查询
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;将频繁操作改为一次性操作
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;const list = document.getElementById(&amp;#39;list&amp;#39;)

// 创建一个文档片段，此时还没有插入到 DOM 结构中
const frag = document.createDocumentFragment()
for(let i=0; i&amp;lt;20; i++) {
    const li = document.createElement(&amp;#39;li&amp;#39;)
    li.innerHTML = `List Item ${i}`

    //先插入到文档片段
    frag.appendChild(li)
}

// 都完成之和，再统一插入到 DOM 结构中
list.appendChild(frag)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;七bom-操作&#34;&gt;七、BOM 操作&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;navigator
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;const ua = navigator.userAgent
const isChrome = ua.indexOf(&amp;#39;Chrome&amp;#39;)
console.log(isChrome)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;screen
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;screen.width
screen.height
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;location
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;console.log(location.href)
console.log(location.protocol)
console.log(location.pathname)
console.log(location.search)
console.log(location.hash)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;history
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;history.back()
history.forward()
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;八事件&#34;&gt;八、事件&lt;/h2&gt;
&lt;h3 id=&#34;事件绑定和事件冒泡&#34;&gt;事件绑定和事件冒泡&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;事件绑定
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;const btn = document.getElementById(&amp;#39;btn&amp;#39;)
btn.addEventListener(&amp;#39;click&amp;#39;, event =&amp;gt; {
  console.log(&amp;#39;clicked&amp;#39;)
})

// 通用的绑定函数
function bindEvent(elem, type, fn) {
  elem.addEventListener(type, fn)
}
const a = document.getElementById(&amp;#39;link&amp;#39;)
bindEvent(a, &amp;#39;click&amp;#39;, e =&amp;gt; {
  e.preventDefault() //阻止默认行为
  console.log(&amp;#39;clicked&amp;#39;)
})
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;事件冒泡
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;const p = document.getElementById(&amp;#39;p&amp;#39;)
const body = document.body
bindEvent(p, &amp;#39;click&amp;#39;, e=&amp;gt; {
  e.stopPropagation()
  console.log(&amp;#39;激活)
})
bindEvent(body, &amp;#39;click&amp;#39;, e =&amp;gt; {
  console.log(&amp;#39;取消&amp;#39;)
})
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;事件代理&#34;&gt;事件代理&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;// 通过事件冒泡实现代理
// 一个支持事件代理的通用事件绑定函数
function bindEvent(elem, type, selector,fn) {
    if(fn == null ) {
      fn = selector
      selector = null
    }
    elem.addEventListener(type, e =&amp;gt; {
      let target
      if(selector) {
        target = e.target
        if(target.matches(selector)) {
          fn.call(target, e)
        }
      } else {
        fn.call(target, e)
      }
    })
  }

const div = document.getElementById(&amp;#39;div&amp;#39;)
bindEvent(div, &amp;#39;click&amp;#39;, event =&amp;gt; {
  event.preventDefault()
  const target = event.target // 获取触发事件的节点
  if(target.nodeName === &amp;#39;A&amp;#39;) {
    console.log(target.innerHtml)
  }
})

const a = document.getElementById(&amp;#39;link&amp;#39;)
bindEvent(a, &amp;#39;click&amp;#39;, e =&amp;gt; {
  e.preventDefault() //阻止默认行为
  console.log(&amp;#39;clicked&amp;#39;)
})
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;九ajax&#34;&gt;九、ajax&lt;/h2&gt;
&lt;h3 id=&#34;xmlhttprequest&#34;&gt;XMLHttpRequest&lt;/h3&gt;
&lt;h4 id=&#34;手写一个ajax请求&#34;&gt;手写一个ajax请求：&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;const xhr = new XMLHttpRequest()
xhr.open(&amp;#39;GET&amp;#39;, &amp;#39;/data/test.json&amp;#39;, false)

xhr.onreadystatechange = function () {
    if(xhr.readyState === 4) {
        if(xhr.status === 200) {
            alert(xhr.responseText)
        }
    }
}
xhr.send()
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;xhrreadystate&#34;&gt;xhr.readyState&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;0 -（未初始化）还没调用send()方法&lt;/li&gt;
&lt;li&gt;1 - （载入）已调用send()方法，正在发送请求&lt;/li&gt;
&lt;li&gt;2 - （载入完成）send()方法执行完成，已接收到全部响应内容&lt;/li&gt;
&lt;li&gt;3 - (交互) 正在解析响应内容&lt;/li&gt;
&lt;li&gt;4 - （完成）响应内容解析完成，可以在客户端调用&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;xhrstatus&#34;&gt;xhr.status&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;2xx - 表示请求成功，如200&lt;/li&gt;
&lt;li&gt;3xx - 需要重定向， 浏览器直接跳转，如 301 302 304&lt;/li&gt;
&lt;li&gt;2xx - 客户端请求错误，如404， 403&lt;/li&gt;
&lt;li&gt;2xx - 服务端错误&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;同源策略和跨域&#34;&gt;同源策略和跨域&lt;/h3&gt;
&lt;h4 id=&#34;跨域&#34;&gt;跨域&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;什么是跨域（同源策略）&lt;/li&gt;
&lt;li&gt;JSONP&lt;/li&gt;
&lt;li&gt;CORS（服务端支持）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;同源策略&#34;&gt;同源策略&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;ajax请求时，浏览器要求当前网页和server必须同源（安全）&lt;/li&gt;
&lt;li&gt;同源：协议、域名、端口，三者必须一致&lt;/li&gt;
&lt;li&gt;前端：http://a.com:8080/；server:https://b.com/api/xxx&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;加载-css-js-可无视同源策略&#34;&gt;加载 &lt;strong&gt;css&lt;/strong&gt; &lt;strong&gt;js&lt;/strong&gt; 可无视同源策略&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;img src=跨域的图片地址 /&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;link href=跨域的css地址 /&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script src=跨域的js地址&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;img /&amp;gt; 可用于统计打点， 可使用第三方统计服务&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;link /&amp;gt; &amp;lt;script&amp;gt; 可使用**CDN**,**CDN**一般都是外域&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script&amp;gt; 可实现JSONP&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;跨域-1&#34;&gt;跨域&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;所有的跨域，都必须经过server端配合&lt;/li&gt;
&lt;li&gt;未经server端允许就实现跨域，说明浏览器有漏洞，危险信号&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;jsonp和cors&#34;&gt;JSONP和CORS&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;JSNOP
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&amp;lt;script&amp;gt;
window.callback = function (data) {
  // 跨域得到的信息
  console.log(data)
}
&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;#34;jsonp.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;

//jsonp文件内容
callback({
  name: &amp;#34;jsonp&amp;#34;
})
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;CORS - 服务器设置 http header
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;response.setHeader(&amp;#34;Access-Control-Allow-Origin&amp;#34;, &amp;#34;http://localhost:8080&amp;#34;)
response.setHeader(&amp;#34;Access-Control-Allow-Headers&amp;#34;, &amp;#34;X-Request-With&amp;#34;)
response.setHeader(&amp;#34;Access-Control-Allow-Methods&amp;#34;, &amp;#34;PUT,POST,GET,DELETE,OPTIONS&amp;#34;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;十存储&#34;&gt;十、存储&lt;/h2&gt;
&lt;h3 id=&#34;cookie&#34;&gt;cookie&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;本身用于浏览器和server通讯&lt;/li&gt;
&lt;li&gt;被“借用”到本地存储&lt;/li&gt;
&lt;li&gt;可用&lt;code&gt;document.cookie = &amp;quot;&amp;quot;&lt;/code&gt; 修改&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cookie的缺点&#34;&gt;cookie的缺点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;存储太小，最大4K&lt;/li&gt;
&lt;li&gt;http请求时需要发送到服务端，增加请求数据量&lt;/li&gt;
&lt;li&gt;只能用&lt;code&gt;document.cookie = &amp;quot;&amp;quot;&lt;/code&gt;修改，太过简陋&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;localstorage-和-sessionstorage&#34;&gt;localStorage 和 sessionStorage&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;HTML5&lt;/strong&gt;专门为存储而设计，最大可存5M&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;API&lt;/strong&gt;简单易用 &lt;strong&gt;setItem&lt;/strong&gt; &lt;strong&gt;getItem&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;不会随着&lt;strong&gt;http&lt;/strong&gt;请求被发送出去&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;localStorage&lt;/strong&gt;数据会永久存储，除非代码或手动删除&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sessionStorage&lt;/strong&gt;数据只存在于当前会话，浏览器关闭则清空&lt;/li&gt;
&lt;li&gt;一般用&lt;strong&gt;localStorage&lt;/strong&gt;会更多一些&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;描述-cookie-localstorage-sessionstorage&#34;&gt;描述 cookie localStorage sessionStorage&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;容量&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;API&lt;/strong&gt;易用性&lt;/li&gt;
&lt;li&gt;是否跟随&lt;strong&gt;http&lt;/strong&gt;请求发送出去&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;十一开发环境&#34;&gt;十一、开发环境&lt;/h2&gt;
&lt;h3 id=&#34;git&#34;&gt;git&lt;/h3&gt;
&lt;h4 id=&#34;常用git命令&#34;&gt;常用git命令&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;git add&lt;/li&gt;
&lt;li&gt;git checkout xxx&lt;/li&gt;
&lt;li&gt;git commit -m xxx&lt;/li&gt;
&lt;li&gt;git push origin master&lt;/li&gt;
&lt;li&gt;git pull origin master&lt;/li&gt;
&lt;li&gt;git branch&lt;/li&gt;
&lt;li&gt;git checkout -b xxx/git checkout xxx&lt;/li&gt;
&lt;li&gt;git merge xxx&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;webpack-和-babel&#34;&gt;webpack 和 babel&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ES6 模块化，浏览器暂不支持&lt;/li&gt;
&lt;li&gt;ES6 语法，浏览器并不完全支持&lt;/li&gt;
&lt;li&gt;压缩代码，整合代码，以提高网页加载速度&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;webpack环境搭建&#34;&gt;webpack环境搭建&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;// webpack.config.js
const path = require(&amp;#39;path&amp;#39;)
const HtmlWebpackPlugin = require(&amp;#39;html-webpack-plugin&amp;#39;)
module.exports = {
    mode: &amp;#39;development&amp;#39;,
    entry: path.join(__dirname, &amp;#39;src&amp;#39;, &amp;#39;index.js&amp;#39;),
    output: {
        filename: &amp;#39;bundle.js&amp;#39;,
        path: path.join(__dirname, &amp;#39;dist&amp;#39;)
    },
    plugins:[
        new HtmlWebpackPlugin({
            template: path.join(__dirname, &amp;#39;src&amp;#39;, &amp;#39;index.html&amp;#39;),
            filename: &amp;#39;index.html&amp;#39;
        })
    ],
    devServer:{
        port: 3000,
        contentBase: path.join(__dirname, &amp;#39;dist&amp;#39;)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;// package.json
&amp;#34;scripts&amp;#34;: {
    &amp;#34;test&amp;#34;: &amp;#34;&amp;#34;,
    &amp;#34;build&amp;#34;: &amp;#34;webpack&amp;#34;,
    &amp;#34;dev&amp;#34;: &amp;#34;webpack-dev-server&amp;#34;
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;webpack-babel&#34;&gt;webpack-babel&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;// 安装babel相关依赖
npm i @babel/core @babel/preset-env babel-loader -D
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;// 在根目录下创建.babelrc文件
{
    &amp;#34;presets&amp;#34;:[&amp;#34;@babel/preset-env&amp;#34;]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;// 在webpack.config.js使用babel-loader
module: {
      rules: [
          {
              test: /\.js$/,
              loader: [&amp;#39;babel-loader&amp;#39;],
              include: path.join(__dirname, &amp;#39;src&amp;#39;),
              exclude: /node_modules/
          }
      ]  
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;webpack生产环境配置&#34;&gt;webpack生产环境配置&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;// 新建一个webpack.prod.js
const path = require(&amp;#39;path&amp;#39;)
const HtmlWebpackPlugin = require(&amp;#39;html-webpack-plugin&amp;#39;)
module.exports = {
    mode: &amp;#39;production&amp;#39;,
    entry: path.join(__dirname, &amp;#39;src&amp;#39;, &amp;#39;index.js&amp;#39;),
    output: {
        filename: &amp;#39;bundle[contenthash].js&amp;#39;,
        path: path.join(__dirname, &amp;#39;dist&amp;#39;)
    },
    plugins:[
        new HtmlWebpackPlugin({
            template: path.join(__dirname, &amp;#39;src&amp;#39;, &amp;#39;index.html&amp;#39;),
            filename: &amp;#39;index.html&amp;#39;
        })
    ],
    module: {
      rules: [
          {
              test: /\.js$/,
              loader: [&amp;#39;babel-loader&amp;#39;],
              include: path.join(__dirname, &amp;#39;src&amp;#39;),
              exclude: /node_modules/
          }
      ]  
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;// package.json
&amp;#34;scripts&amp;#34;: {
    &amp;#34;test&amp;#34;: &amp;#34;&amp;#34;,
    &amp;#34;build&amp;#34;: &amp;#34;webpack --config webpack.prod.js&amp;#34;,
    &amp;#34;dev&amp;#34;: &amp;#34;webpack-dev-server&amp;#34;
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;linux常用命令&#34;&gt;linux常用命令&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ls&lt;/li&gt;
&lt;li&gt;mkdir&lt;/li&gt;
&lt;li&gt;rm&lt;/li&gt;
&lt;li&gt;cd&lt;/li&gt;
&lt;li&gt;mv&lt;/li&gt;
&lt;li&gt;cp&lt;/li&gt;
&lt;li&gt;touch&lt;/li&gt;
&lt;li&gt;vi&lt;/li&gt;
&lt;li&gt;cat head tail&lt;/li&gt;
&lt;li&gt;grep 查找 &lt;code&gt;grep &amp;quot;babel&amp;quot; package.json&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;运行环境-1&#34;&gt;运行环境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;网页加载过程&lt;/li&gt;
&lt;li&gt;性能优化&lt;/li&gt;
&lt;li&gt;安全&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;页面加载过程&#34;&gt;页面加载过程&lt;/h3&gt;
&lt;h4 id=&#34;题目-2&#34;&gt;题目&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;从输入url到渲染出整个页面的过程&lt;/li&gt;
&lt;li&gt;window.onload 和 DOMContentLoaded 的区别&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;知识点-2&#34;&gt;知识点&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;资源加载的形式
&lt;ul&gt;
&lt;li&gt;html文件&lt;/li&gt;
&lt;li&gt;媒体文件，如图片、视频等&lt;/li&gt;
&lt;li&gt;javascript css&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;资源加载的过程
&lt;ul&gt;
&lt;li&gt;DNS解析：域名 -&amp;gt; IP地址&lt;/li&gt;
&lt;li&gt;浏览器根据IP地址向服务器发起http请求&lt;/li&gt;
&lt;li&gt;服务器处理http请求，并返回给浏览器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;页面渲染的过程
&lt;ul&gt;
&lt;li&gt;根据 HTML 代码生成 DOM Tree&lt;/li&gt;
&lt;li&gt;根据 CSS 生成 CSSOM&lt;/li&gt;
&lt;li&gt;将 DOM Tree 和 CSSOM 整合形成 Render Tree&lt;/li&gt;
&lt;li&gt;根据 Render Tree 渲染页面&lt;/li&gt;
&lt;li&gt;遇到 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 则暂停渲染，优先加载并执行JS代码，完成再继续， 一直到Render Tree渲染完成&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;思考&#34;&gt;思考:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;为何建议把 css 放到 head 中？
答：先加载css，DOM tree生成之和，两者整合生成Render Tree，避免多次渲染&lt;/li&gt;
&lt;li&gt;为什么把 js 放在body最后？
答：加载&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;标签会暂停渲染&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;问题解答&#34;&gt;问题解答&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;从输入url到渲染出整个页面的过程
&lt;ul&gt;
&lt;li&gt;下载资源：各个类型的资源，下载过程&lt;/li&gt;
&lt;li&gt;渲染页面：结合 html css javascript 图片等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;window.onload 和 DOMContentLoaded 的区别
&lt;ul&gt;
&lt;li&gt;window.onload 资源全部加载完才能执行，包括图片&lt;/li&gt;
&lt;li&gt;DOMContentLoaded DOM渲染完成即可，图片可能尚未下载&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;十三性能优化&#34;&gt;十三、性能优化&lt;/h2&gt;
&lt;h3 id=&#34;性能优化原则和方向&#34;&gt;性能优化原则和方向&lt;/h3&gt;
&lt;h4 id=&#34;性能优化原则&#34;&gt;性能优化原则&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;多使用内存、缓存或其他方法&lt;/li&gt;
&lt;li&gt;减少CPU计算量，减少网络加载耗时&lt;/li&gt;
&lt;li&gt;空间换时间&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;从何入手&#34;&gt;从何入手&lt;/h4&gt;
&lt;h5 id=&#34;让加载更快&#34;&gt;让加载更快&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;减少资源体积：压缩代码&lt;/li&gt;
&lt;li&gt;减少访问次数：合并代码，SSR 服务器端渲染，缓存
&lt;strong&gt;合并请求：&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;//多次请求
&amp;lt;script src=&amp;#34;a.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;#34;b.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;#34;c.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;

// 合别为一次请求
&amp;lt;script src=&amp;#34;abc.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;strong&gt;缓存:&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;// webpack打包时给文件名加上hash
output:{
  filename: &amp;#39;bundle.[contenthash].js&amp;#39;,
  path: path.join(__dir, &amp;#39;dist&amp;#39;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;静态资源加hash后缀，根据文件内容计算hash&lt;/li&gt;
&lt;li&gt;文件内容不变，则hash不变，则url不变&lt;/li&gt;
&lt;li&gt;url和文件不变，则会自动触发http缓存机制，返回304
&lt;strong&gt;SSR&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;服务端渲染： 将网页和数据一起加载，一起渲染&lt;/li&gt;
&lt;li&gt;非SSR(前后端分离)：先加载网页，再加载数据，再渲染数据&lt;/li&gt;
&lt;li&gt;最早的JSP ASP PHP, 现在的vue React SSR&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用更快的网络：CDN&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;让渲染更快&#34;&gt;让渲染更快&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;CSS放在head， JS 放在body最下面&lt;/li&gt;
&lt;li&gt;尽早开始执行JS，在 &lt;code&gt;DOMContentLoaded&lt;/code&gt;触发
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;window.addEventListener(&amp;#39;load&amp;#39;, function(){
  // 页面全部资源加载完毕才会执行，包括图片、视频等
})

document.addEventListener(&amp;#39;DOMContentLoaded&amp;#39;, function(){
  // DOM 渲染完成即可执行，此时图片、视频还没有加载完
})

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;懒加载(图片懒加载， 上滑加载更多)
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&amp;lt;img id=&amp;#34;img&amp;#34; src=&amp;#34;default.png&amp;#34; data-realsrc=&amp;#34;abc.png&amp;#34;&amp;gt;

&amp;lt;script type=&amp;#34;text/javascript&amp;#34;&amp;gt;
var img = document.getElementById(&amp;#39;img&amp;#39;)
img.src = img.getAttribute(&amp;#39;data-realsrc&amp;#39;)
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;对 DOM 查询进行缓存&lt;/li&gt;
&lt;li&gt;避免频繁操作DOM，合并一起插入DOM结构
使用&lt;code&gt;document.createDocumentFragment()&lt;/code&gt;创建文档片段，合并DOM操作&lt;/li&gt;
&lt;li&gt;节流 &lt;code&gt;throttle&lt;/code&gt;  防抖 &lt;code&gt;debounce&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;防抖&#34;&gt;防抖&lt;/h3&gt;
&lt;p&gt;简易实现方式&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;const input = document.getElementById(&amp;#39;input&amp;#39;)
let timer = null
input.addEventListener(&amp;#39;keyup&amp;#39;, function (e) {
  if (timer) {
    clearTimeout(timer)
  }
  timer = setTimeout(() =&amp;gt; {
    console.log(e.target.value)
    timer = null // 清除定时器
  }, 500)
})
// 每次输入之和隔500毫秒输出当前value
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;封装成debounce函数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;function debounce(fn, delay) {
  let timer
  return function () {
    if (timer) {
      clearTimeout(timer)
    }
    timer = setTimeout(() =&amp;gt; {
      fn.apply(this, arguments)
      timer = null
    }, delay)
  }
}
input.addEventListener(
  &amp;#39;keyup&amp;#39;,
  debounce((e) =&amp;gt; {
    console.log(e.target.value)
  }, 500)
)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;节流&#34;&gt;节流&lt;/h3&gt;
&lt;p&gt;简单实现&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;const div = document.getElementById(&amp;#39;div&amp;#39;)
let timer
div.addEventListener(&amp;#39;drag&amp;#39;, function(e)  {    
    if(timer) return
    timer = setTimeout(() =&amp;gt;{
        console.log(e.offsetX, e.offsetY)
        timer = null
    }, 500)
})
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;封装成函数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;function throttle(fn, delay) {
    let timer
    return function () {
        if(timer) return
        timer = setTimeout(() =&amp;gt; {
            fn.apply(this, arguments)
            timer = null
        }, delay)
    }
}
div.addEventListener(&amp;#39;drag&amp;#39;, throttle((e) =&amp;gt; {
    console.log(e.offsetX, e.offsetY)
}, 500))
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;十三、面试技巧&lt;/p&gt;
&lt;h3 id=&#34;关于简历&#34;&gt;关于简历&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;简洁明了，突出个人技能和项目经验&lt;/li&gt;
&lt;li&gt;可以把个人博客、开源作品放在简历上（但博客要有内容）&lt;/li&gt;
&lt;li&gt;不要造假，保证能力上的真实性（斟酌用词，如精通xxx）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;面试过程中注意事项&#34;&gt;面试过程中注意事项&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;如何看待加班：像借钱，救急不救穷&lt;/li&gt;
&lt;li&gt;千万不要挑战面试官，反考面试官&lt;/li&gt;
&lt;li&gt;学会给面试官惊喜，证明你能想到更多，做的更多，但不要太多&lt;/li&gt;
&lt;li&gt;遇到不会的问题，说出自己会的部分即可，但别岔开话题&lt;/li&gt;
&lt;li&gt;谈谈你的缺点：说下最近在学什么。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;十四面试真题&#34;&gt;十四、面试真题&lt;/h2&gt;
&lt;h4 id=&#34;何为变量提升&#34;&gt;何为变量提升&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;var是ES5语法，let const 是 ES6语法；var有变量提升&lt;/li&gt;
&lt;li&gt;var let是变量，可修改；const是常量，不可修改&lt;/li&gt;
&lt;li&gt;let const 有块级作用域；var 没有&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;typeof-能判断哪些类型&#34;&gt;typeOf 能判断哪些类型&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;undefined string number boolean symbool&lt;/li&gt;
&lt;li&gt;object(注意， typeOf null === &amp;lsquo;object&amp;rsquo;)&lt;/li&gt;
&lt;li&gt;function&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;列举强制类型转换与隐式类型转换&#34;&gt;列举强制类型转换与隐式类型转换&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;强制：&lt;code&gt;parseInt&lt;/code&gt; &lt;code&gt;parseFloat&lt;/code&gt; &lt;code&gt;toString&lt;/code&gt;等&lt;/li&gt;
&lt;li&gt;隐式：if、逻辑运算、==、+ 拼接字符串&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;手写深度比较&#34;&gt;手写深度比较&lt;/h4&gt;
&lt;h4 id=&#34;split和join区别&#34;&gt;split()和join()区别&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&amp;#39;1-2-3&amp;#39;.split(&amp;#39;-&amp;#39;) // [1,2,3]
[1,2,3].join(&amp;#39;-&amp;#39;) // &amp;#39;1-2-3&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;数组的pop-push-unshift-shift-分别做什么&#34;&gt;数组的pop push unshift shift 分别做什么&lt;/h4&gt;
&lt;h4 id=&#34;数组的api有哪些是纯函数&#34;&gt;数组的API，有哪些是纯函数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;纯函数：1. 不改变原数组（没有副作用）；2. 返回一个新数组&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;concat&lt;/li&gt;
&lt;li&gt;map&lt;/li&gt;
&lt;li&gt;filter&lt;/li&gt;
&lt;li&gt;slice
&lt;code&gt;forEach some every&lt;/code&gt;也不改变原数组，但是具有返回值&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;数组slice和splice的区别&#34;&gt;数组slice和splice的区别&lt;/h4&gt;
&lt;p&gt;slice是纯函数， splice非纯函数&lt;/p&gt;
&lt;h4 id=&#34;102030mapparseint返回结果是什么&#34;&gt;[10,20,30].map(parseInt)返回结果是什么&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;[10,20,30].map(parseInt)
// 可以转化为下面这种形式
[10,20,30].map((n,index) =&amp;gt; {
  return parseInt(n, index)
})
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;ajax请求get-和-post-区别&#34;&gt;ajax请求get 和 post 区别？&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;get一般用于查询，post一般用于提交操作&lt;/li&gt;
&lt;li&gt;get参数拼接在url上，post放在请求体内&lt;/li&gt;
&lt;li&gt;安全性：post易于防止CSRF&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;函数call-和-apply-区别&#34;&gt;函数call 和 apply 区别&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;fn.call(this, p1,p2,p3)
fn.apply(this, [p1,p2,p3])
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;时间代理委托是什么&#34;&gt;时间代理（委托）是什么&lt;/h4&gt;
&lt;p&gt;通过事件冒泡机制实现&lt;/p&gt;
&lt;h4 id=&#34;闭包是什么有什么特性有什么负面影响&#34;&gt;闭包是什么？有什么特性？有什么负面影响？&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;作用域和自由变量&lt;/li&gt;
&lt;li&gt;应用场景：作为参数传入，作为返回值返回&lt;/li&gt;
&lt;li&gt;自由变量的查找，在&lt;strong&gt;函数定义的地方&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;影响： 变量常驻内存，内存得不到释放&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;如何阻止事件冒泡和默认行为&#34;&gt;如何阻止事件冒泡和默认行为？&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;event.stopPropagation()&lt;/li&gt;
&lt;li&gt;event.preventDefault()&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;查找添加删除移动dom节点的方法&#34;&gt;查找、添加、删除、移动DOM节点的方法？&lt;/h4&gt;
&lt;h4 id=&#34;如何减少dom操作&#34;&gt;如何减少DOM操作？&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;缓存DOM查询结果&lt;/li&gt;
&lt;li&gt;多次DOM操作，合并到一次插入(createDocumentFragment)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;解释jsonp的原理为何它不是真正的ajax&#34;&gt;解释jsonp的原理，为何它不是真正的ajax？&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;浏览器的同源策略和跨域&lt;/li&gt;
&lt;li&gt;哪些html标签能绕过跨域&lt;/li&gt;
&lt;li&gt;jsonp原理&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;document-load-和-ready-的区别&#34;&gt;document load 和 ready 的区别&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;window.onload 资源全部加载完才能执行，包括图片&lt;/li&gt;
&lt;li&gt;DOMContentLoaded DOM渲染完成即可，图片可能尚未下载&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;-和--的不同&#34;&gt;== 和 === 的不同&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;== 会尝试类型转换&lt;/li&gt;
&lt;li&gt;=== 严格相等&lt;/li&gt;
&lt;li&gt;建议只有 == null 这种情况下使用 ==&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;函数声明和函数表达式的区别&#34;&gt;函数声明和函数表达式的区别&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;函数声明 &lt;code&gt;function (){}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;函数表达式 &lt;code&gt;const fn = function(){}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;函数声明会在代码执行之前预加载，会变量提升，而函数表达式不会&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;new-object-和-objectcreate的区别&#34;&gt;new Object() 和 Object.create()的区别？&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;{} 等同于new Object(), 原型Object.prototype&lt;/li&gt;
&lt;li&gt;Object.create(null) 没有原型&lt;/li&gt;
&lt;li&gt;Object.create({&amp;hellip;}) 可指定原型&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;关于this的使用场景&#34;&gt;关于this的使用场景&lt;/h4&gt;
&lt;h4 id=&#34;手写字符串-trim-方法保证浏览器兼容性&#34;&gt;手写字符串 trim 方法，保证浏览器兼容性&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;String.prototype.trim = function () {
  return this.replace(/^\s+/, &amp;#39;&amp;#39;).replace(/\s+$/, &amp;#39;&amp;#39;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;如何获取多个数字中最大值&#34;&gt;如何获取多个数字中最大值&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;/**
 * 取数组中最大值
 * @param {number[]} nums  数组
 */
function max(nums) {
    // let arr = Array.from(arguments)
    let max = 0
    for(let value of nums) {
        max = Math.max(max, value)
    }
    return max
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;如何用js实现继承&#34;&gt;如何用JS实现继承&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;class&lt;/li&gt;
&lt;li&gt;prototype&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;如何捕获js程序中异常&#34;&gt;如何捕获JS程序中异常&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;try {

  } catch(err) {
    console.log(err)
  } 
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;window.onerror = function(){}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;什么是json&#34;&gt;什么是JSON&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;json是一种数据格式，本质是字符串&lt;/li&gt;
&lt;li&gt;json格式和JS对象结构一致，对JS语言更友好&lt;/li&gt;
&lt;li&gt;window.JSON是一个全局对象：JSON.stringify JSON.parse&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;获取当前页面的url参数&#34;&gt;获取当前页面的url参数&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;传统方式，通过&lt;code&gt;location.search&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;新API， &lt;code&gt;URLSearchParams&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;将url参数解析为js对象&#34;&gt;将url参数解析为JS对象&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;// 传统方式，分析search
function queryToObj() {
  const res = {}
  const search = location.search.substr(1) // 去掉前面的”？“
  search.split(&amp;#39;&amp;amp;&amp;#39;).forEach((p) =&amp;gt; {
    const arr = p.split(&amp;#39;=&amp;#39;)
    const key = arr[0]
    const val = arr[1]
    res[key] = val
  })
  return res
}

// 使用URLSearchParams
function queryToObj() {
    const res = {}
    const pList = new URLSearchParams(location.search)
    pList.forEach((val, key) =&amp;gt; {
        res[key] = val
    })
    return res
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;手写数组flatern-考虑多层级&#34;&gt;手写数组flatern, 考虑多层级&lt;/h4&gt;
&lt;h4 id=&#34;数组去重&#34;&gt;数组去重&lt;/h4&gt;
&lt;h4 id=&#34;手写深拷贝&#34;&gt;手写深拷贝&lt;/h4&gt;
&lt;h4 id=&#34;介绍一下raf-requestanimateframe&#34;&gt;介绍一下RAF requestAnimateFrame&lt;/h4&gt;
&lt;h4 id=&#34;前端性能如何优化一般从哪几方面进行考虑&#34;&gt;前端性能如何优化？一般从哪几方面进行考虑？&lt;/h4&gt;
</description>
        </item>
        
    </channel>
</rss>
